SOLID:

* S: SRP - Single Resonsabilit Princible

* O: OCP - Open Close Principle
Aberto para extensão (extends, heranca)e fechado para modificacao

* L: LSP - Liskov Substitution Priciple
Uma classe base deve poder ser substituida por sua classe derivada
- implementar OCP permite isso 

* I: ISP - Interface Segregation Priciple
Clientes (classes) não devem ser forcadas a depender de metodos que elas não usam
Evitar criar interfaces genericas que forçam a implementação de metodos

* D: DIP -  Dependency Inversion Principle
Inversão de controle ou injeção de dependencia
Modulos de alto nível não devem depender de modulos de baixo nivel. Ambos devem depender 
de abstrações; abstraçoes não devem de detalhes. Detalhes devem depender de abstrações
- depender de abstração(interface) e nao de implementação, a implementação muda de acordo 
com a interface
maior coesao - (é a ligação harmônica entre duas partes, utilizada na gramática como forma de obter um texto claro e compreensível.)



Microservices
dependem de:
SOLID
DESING PATHERNS
TESTS
DDD
Conshecimendo de arquitetura de software
NOSQL (redis)
Teorema CAP - Consistencia - Disponibilidade - tolerancia a partição
Cultura de DevOPs
Orquestração, comunicação (event bus, queue)
monitoramento e resolução de falhas
cloud e containers




